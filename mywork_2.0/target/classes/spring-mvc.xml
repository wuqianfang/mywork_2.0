<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans     
                        http://www.springframework.org/schema/beans/spring-beans.xsd     
                        http://www.springframework.org/schema/context     
                        http://www.springframework.org/schema/context/spring-context.xsd     
                        http://www.springframework.org/schema/mvc     
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
 
 
    <!--添加注解驱动 -->
    <mvc:annotation-driven />
    <mvc:default-servlet-handler />
    <!--设置使用注解的类所在的包 -->
    <context:component-scan base-package="com.tomwu.maven.ssm.login,com.tomwu.maven.ssm.function" />
    <!--完成请求和注解POJO的映射 -->
    
    
  <!-- 配置拦截器 -->
<!-- 	<mvc:interceptors> -->
<!-- 		<mvc:interceptor> -->
			<!-- 拦截所有mvc控制器 -->
<!-- 			<mvc:mapping path="/**"/> -->
<!--			mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在
 				LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) -->
			<!-- 登陆页面	 -->
<!-- 			<mvc:exclude-mapping path="/user/login" /> -->
			<!-- 登陆方法 -->
<!-- 			<mvc:exclude-mapping path="/user/sign-in" /> -->
<!-- 			<mvc:exclude-mapping path="/css/**" /> -->
<!--           	<mvc:exclude-mapping path="/img/**" />  -->
<!--          	<mvc:exclude-mapping path="/js/**"/>    -->
<!-- 			<bean class="com.tomwu.bookstore.interceptor.LoginInterceptor"></bean>			 -->
<!-- 		</mvc:interceptor> -->
<!-- 	</mvc:interceptors> -->
    
    <!-- java对象和json相互转化 -->
    <!--               rg.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter -->
<!--     <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> -->
<!--         <property name="messageConverters"> -->
<!--             <list> -->
<!--                 <ref bean="mappingJacksonHttpMessageConverter" /> JSON转换器 -->
<!--             </list> -->
<!--         </property> -->
<!--     </bean> -->


<!--start:使用Jackson 1.x的配置，需要导入的jar包：jackson-core-lpgl-xxx.jar、jackson-mapper-lgpl-xxx.jar -->
<!-- <bean class ="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" > -->
<!--     <property name="messageConverters"> -->
<!--         <list> -->
            <!-- 设置返回字符串编码,避免使用@ResponseBody后返回乱码 -->
<!--             <bean class="org.springframework.http.converter.StringHttpMessageConverter"> -->
<!--                 <property name = "supportedMediaTypes"> -->
<!--                     <list> -->
<!--                         <value>text/html;charset=UTF-8</value> -->
<!--                     </list> -->
<!--                 </property> -->
<!--             </bean> -->
            <!-- json转换器 -->
<!--             <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" > -->
<!--                 <property name="supportedMediaTypes"> -->
<!--                     <list> -->
<!--                         <value>text/html;charset=UTF-8</value> -->
<!--                     </list> -->
<!--                 </property> -->
<!--             </bean> -->

<!--         </list> -->
<!--     </property> -->
<!-- </bean> -->
<!--end:使用Jackson 1.x的配置，需要导入的jar包：jackson-core-lpgl-xxx.jar、jackson-mapper-lgpl-xxx.jar -->

<!--start:使用Jackson 2.x的配置，需要导入的jar包：jackson-core-xxx.jar、jackson-annotations-xxx.jar、jackson-databind-xxx.jar-->
<!--通过处理器映射DefaultAnnotationHandlerMapping来开启支持@Controller注解-->
<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
<!--通过处理器适配器AnnotationMethodHandlerAdapter来开启支持@RequestMapping注解-->
<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
    <property name="messageConverters">
        <list>
            <!-- 设置返回字符串编码 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name = "supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <!-- json转换器 -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </list>
    </property>
</bean>
<!--end:使用Jackson 2.x的配置，需要导入的jar包：jackson-core-xxx.jar、jackson-annotations-xxx.jar、jackson-databind-xxx.jar-->
 



    
    <!--定义跳转文件的前后缀，试图模式配置 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>
    <!--避免IE执行AJAX时，返回JSON出现下载文件                      -->
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
    <property name="supportedMediaTypes">  
        <list>  
            <value>application/json;charset=UTF-8</value>  
        </list>  
    </property>  
</bean> 
    
<!--     <mvc:default-servlet-handler/> -->

    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />
    </bean>
</beans>             